name: Build Rust Project

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux AMD64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: target/x86_64-unknown-linux-gnu/release
            asset_name: linux-amd64
          
          # Linux ARM64
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            artifact_name: target/aarch64-unknown-linux-gnu/release
            asset_name: linux-arm64
          
          # macOS x86
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: target/x86_64-apple-darwin/release
            asset_name: macos-x86
          
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: target/aarch64-apple-darwin/release
            asset_name: macos-arm64

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry and index
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-target-

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --target ${{ matrix.target }}

    - name: Resolve binary name
      shell: bash
      run: |  
        # Find the binary name from Cargo.toml
        BINARY_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].targets[] | select(.kind[] | contains("bin")) | .name' | head -1)
      
         # Export BINARY_NAME to make it available for subsequent steps
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

    - name: Upload binary to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ matrix.artifact_name }}/${{ env.BINARY_NAME }}
        asset_name: ${{ env.BINARY_NAME }}-${{ matrix.asset_name }}
        tag: ${{ github.ref }}
        overwrite: true